LF OS Kernel 4 - Interprozesskommunikation
________________________________________________________________________________

Die Interprozesskommunikation in LF OS läuft zum großen Teil über
Remote Procedure Call's (RPC's) ab. Dadurch kann eine hohe Geschwindigkeit und
eine hohe Anzahl an Parametern erreicht werden. RPC's werden für die
Kommunikation zwischen Kernel<->Prozess/Treiber verwendet. Wenn ein Prozess mit
einem anderen "reden" möchte, muss er den Umweg über den Kernel gehen und eine
Nachricht senden. Nachrichten werden per RPC versendet und per polling
empfangen. Für hohen Datendurchsatz zwischen 2 Prozessen sollte also Shared-
Memory verwendet werden.

Die Pointer für die Funktionen sind beim Start eines neuen Programmes an der
Speicheradresse 0x40000000 (1GB) hinterlegt. Dort liegt eine Struktur vom Typ
RPC im Speicher. Diese Struktur darf auf keinen Fall überschrieben werden, da
der Prozess sonst keine Möglichkeit mehr hat Anfragen zu senden oder auf
Anfragen zu reagieren.
Treiber haben zusätzlich noch eine Struktur vom Typ TreiberRPC an der Adresse
0x40001000 (1G4KB)

Für den Aufruf der RPC Funktionen gelten die Aufrufbestimmungen der Programmier-
sprache C bzw. C++. (Anmerkung: CDECL?)


Aufbau der RPC und TreiberRPC Struktur
________________________________________________________________________________

Beide Strukuren bestehen aus Funktionspointern. Ein Pointer ist immer 64 Bit
groß, womit auch der Einsatz auf 64Bit Systemen möglich ist.
In einer Struktur sind bis zu 128 Funktionen gespeichert. Die Positionen der
Funktionen innerhalb der Struktur bleiben zwischen den LF OS Versionen gleich.


Liste der Funktionen in der RPC Struktur
________________________________________________________________________________

Die Reihenfolge in dieser Liste entspricht der Reihenfolge in der Struktur.

void *AllocPage();
bool AllocRange(int pageNumStart, int count);
void FreePage(void *page);
void FreeRange(int pageNumStart, int count);

void SendMessage(PID process, Message *msg);
Message *GetMessage();

LLFile *OpenFile(char *path, bool write, bool binary=true);
void ReadFile(LLFile *file, char *buffer, uint32_t start, uint32_t count);
void WriteFile(LLFile *file, char *buffer, uint32_t start, uint32_t count);
void CloseFile(LLFile *file);


Liste der Funktionen in der TreiberRPC Struktur
________________________________________________________________________________

Die Reihenfolge in dieser Liste entspricht der Reihenfolge in der Struktur.

uint64_t RegisterDevice(char *deviceName, char *devicePath, bool specialized,
						void (*Read)(char *buffer, int start, int count),
						void (*Write)(char *buffer, int start, int count),
						DeviceType type);
bool UnregisterDevice(uint64_t deviceId);